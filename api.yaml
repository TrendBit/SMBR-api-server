openapi: 3.0.3
info:
  title: Smart Modular BioReactor API/CAN Specification
  description: |-
    API facilitating communication with SMBR (Smart Modular BioReactor), which is used for algae cultivation.

    API enables communication with components of the device, this could be:
      - System - abstraction of whole device, this is not a module, but can initiate into communication with them
      - Code module - Represents main unit - SBC (RaspberryPi) - Also connected to can but only internally can supply power supply info, network statistics, etc.
      - Modules: All external hardware connected via CAn to one network, each module has specific functionality
        - Control module - responsible for controlling most of the actions of the system (heating, cooling, mixing, etc.)
        - Sensor module - responsible for reading the temperature sensor data

    Gate/Gateway is another abstract module representing API access to CAN bus, will not be addressed by any can message (cannot be), but within this documentation the API can be referred to as part of the CAN network as Gate/Gateway.

    This API definition also contain description of CAN bus messages which are related to the API path:
      - All CAN messages are using extended format with 29-bit ID
      - Messages with 11-bit ID are reserved for emergency messages and low level communication (katapult bootloader, serial emulator)
        - If API Gate will receive any message with 11-bit ID it should be discarded
      - Where applicable little-endian is used this means, that ID `0x10fe` with be split as `{ID0; ID1}` = `{ 0xfe; 0x10 }`

    CAN messages are composed of ID and Data
     - **ID** is 29-bit identifier which is composed of:
        - __Base__ Identifier:
          - [10:4] - 7-bit module ID
          - [3:0]  - 4-bit instance ID
        - __Extended__ Identifier:
          - [28:17] - 12-bit message ID
          - [16:10] - 6-bit reserved
     - **Data** can have length from 0 to 8 bytes and data message specific

    Module ID - is 7-bit identifier of the module, this is unique for each HW module
    Instance ID - some modules can have more then one instance of the same module, this is used to differentiate between them
      - Current HW modules coul have only one instance
      - Modules with only one allowed instance can be addressed with any instance ID, but 0x0 is preferred
    Message ID - is 12-bit identifier of the message, this is unique for each message type
      - If message is not supported by module which received it it will be ignored or error message could be send back


    Message type is generaly split into groups based on first 4 bits of message id:
    ```
      - 0x0 - Module specific - Emergency
      - 0x1 - Module specific - High priority
      - 0x2 - Common messages - High priority
      - 0x3 - Shared messages - High priority
      - 0x4 - Module specific
      - 0x5 - Module specific
      - 0x6 - Module specific
      - 0x7 - Module specific
      - 0x8 - Module specific
      - 0x9 - Reserved for future use
      - 0xa - Common messages
      - 0xb - Common messages
      - 0xc - Shared messages
      - 0xd - Reserved for future use
      - 0xe - Error messages
      - 0xf - Debugging
    ```

    __Module IDs__:
    ```
    Undefined       = 0x000,
    All             = 0x001,
    Any             = 0x002,
    TestBed         = 0x003,
    Core_device     = 0x004,
    Control_board   = 0x005,
    Sensor_board    = 0x006,
    ```


  version: 0.1.0

servers:
  - url: localhost:9000

tags:
  - name: System
    description: Relates to the whole system/device, not to individual modules
  - name: Common
    description: Functionality that is implemented by all modules
  - name: Core module
    description: The core unit representing the central device that provides the interface (RaspberryPi), also connected internally via CAN bus
  - name: Control module
    description: The unit that is responsible for controlling most of the actions of system (heating, cooling, mixing, etc.)
  - name: Sensor module
    description: The unit that is responsible for reading the temperature sensor data


paths:
  /system/modules:
    get:
      tags:
        - System
      summary: Determines which all modules are available on the device and their respective unique CAN IDs
      description: |-
        Returns a list of all modules that have responded to the identification message and can therefore be considered available on the device.

        Included are the unique CAN IDs of the modules. Unique ID is 64-bit identifier which is made from :
          - MCU unique ID from Flash memory
          - RPi unique ID is lower part of serial number `/sys/firmware/devicetree/base/serial-number`

        **CAN request message format:**
        ```
        Message: 0x300 - Probe request
        Module: 0x01 - All
        Instance: 0x00 - Any
        Data:
        ```

        **CAN response message format:**
        ```
        Message: 0x301 - Probe response
        Module: #
        Instance: #
        Data: UID0 UID1 UID2 UID3 UID4 UID5 UID6 UID7
        ```

      responses:
        200:
          description: List of available devices
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    module_type:
                      $ref: '#/components/schemas/module_name'
                    uid:
                      $ref: '#/components/schemas/uid'
                example: [{"module_type":"core","uid":"0x0123456789abcdef"},{"module_type":"control","uid":"0xfedcba9876543210" }]

  /system/temperature:
    get:
      tags:
        - System
      summary: Get the main temperature of the system/bottle
      description: |-
        This temperature could be obtained by different means based on configuration.
        Configured module (sensor module at default) will periodically calculate temperature of system and will it broadcast it via CAN.
        On side of gateway this last temperature value is saved and supplied to API,

        **CAN shared message format:**
        ```
        Message: 0x301 - System temperature response
        Module: 0x06 - Sensor module (at default)
        Instance: 0x00
        Data: TEMP0 TEMP1 TEMP2 TEMP3
        ```

      responses:
        200:
          description: Successfully retrieved system temperature
          content:
            application/json:
              schema:
                type: object
                properties:
                  temperature:
                    $ref: '#/components/schemas/temperature'
  /{module}/ping:
    get:
      tags:
        - Common
      summary: Send ping to target module
      description: |-
        Sends ping request to target module and wait for response. If response is not received in 1 seconds, then timeouts.

        On CAN bus first byte of message is Sequential_number, which is used to match request and response.

        **CAN request message format:**
        ```
        Message: 0xb00 - Ping request
        Module: # - Select module based on parameter
        Instance: 0x00
        Data: SEQ_NUMBER
        ```

        **CAN response message format:**
        ```
        Message: 0xb01 - Ping response
        Module: #
        Instance: #
        Data: SEQ_NUMBER
        ```

      parameters:
        - $ref: '#/components/parameters/module'
      responses:
        200:
          description: Ping received from module
          content:
            application/json:
              schema:
                type: object
                properties:
                  time_ms:
                    type: number
                    format: float
                    minimum: 0
                    maximum: 1000.0
                    example: 2.5
        408:
          description: Timeout waiting for response
          content:
            application/json:
              schema:
                type: object
                properties:
                  timeout:
                    type: number
                    format: float
                    minimum: 0
                    maximum: 1000.0
                    example: 1000.0
        404:
          $ref: '#/components/responses/module_not_found'

  /{module}/load:
    get:
      tags:
        - Common
      summary: Get module CPU/MCU load
      description: |-
        Gets the current workload values of the computing unit. This is the average utilization of all available cores. For example, for Rpi this is all available cores. For the RP2040, it depends on the module whether it uses only one or two cores. The number of available cores is part of the answer.


        **CAN request message format:**
        ```
        Message: 0xa00 - Load request
        Module: # - Select module based on parameter
        Instance: 0x00
        Data:
        ```

        **CAN response message format:**
        ```
        Message: 0xa01 - Load response
        Module: #
        Instance: #
        Data: UID0 UID1 UID2 UID3 UID4 UID5 UID6 UID7
        ```

      parameters:
        - $ref: '#/components/parameters/module'
      responses:
        200:
          description: Successfully retrieved load from module
          content:
            application/json:
              schema:
                type: object
                properties:
                  load:
                    type: number
                    format: float
                    minimum: 0
                    maximum: 1.0
                    example: 0.5
                  cores:
                    type: integer
                    format: integer
                    minimum: 1
        404:
          $ref: '#/components/responses/module_not_found'

  /{module}/core_temp:
    get:
      tags:
        - Common
      summary: Get module CPU/MCU temperature
      description: |-
        Gets the current temperature of CPU/MCU core values of the computing unit.

        **CAN request message format:**
        ```
        Message: 0xa02 - Core temperature request
        Module: # - Select module based on parameter
        Instance: 0x00 - Any
        Data:
        ```

        **CAN response message format:**
        ```
        Message: 0xa03 - Core temperature response
        Module: #
        Instance: #
        Data: TEMP0 TEMP1 TEMP2 TEMP3
        ```

      parameters:
        - $ref: '#/components/parameters/module'
      responses:
        200:
          description: Successfully retrieved load from module
          content:
            application/json:
              schema:
                type: object
                properties:
                  core_temp:
                    $ref: '#/components/schemas/temperature'
        404:
          $ref: '#/components/responses/module_not_found'

  /{module}/restart:
    post:
      tags:
        - Common
      summary: Restart module into application mode
      description: |-
        This will reset the module and it will start main application firmware again.
        UID of the module is required in order to confirm that correct module is selected by request.

        **CAN request message format:**
        ```
        Message: 0x200 - Restart request
        Module: # - Select module based on parameter
        Instance: 0x00
        Data: UID0 UID1 UID2 UID3 UID4 UID5 UID6 UID7
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  $ref: '#/components/schemas/uid'

      parameters:
        - $ref: '#/components/parameters/module'
      responses:
        200:
          description: Successfully restarted module
        404:
          $ref: '#/components/responses/module_not_found'

  /{module}/bootloader:
    post:
      tags:
        - Common
      summary: Reboot module in bootloader (katapult) mode
      description: |-
        This will reset the module and put it into bootloader mode so new firmware can be flashed into it.
        UID of the module is required in order to confirm that correct module is selected by request.

        **CAN request message format:**
        ```
        Message: 0x201 - Bootloader request
        Module: # - Select module based on parameter
        Instance: 0x00
        Data: UID0 UID1 UID2 UID3 UID4 UID5 UID6 UID7
        ```

      parameters:
        - $ref: '#/components/parameters/module'
      responses:
        200:
          description: Successfully restarted module in bootloader mode
        404:
          $ref: '#/components/responses/module_not_found'


  /core/supply_type:
    get:
      tags:
        - Core module
      summary: determine which power supply is currently in use Adapter/PoE+
      description: |-
        Device can be powered from two power sources (AC adapter -> 12V or PoE+), which supply is connected can be determined from RPi.
        RPi pin header GPIO are connected to interface shield where are detector circuits for each power supply type.

        **CAN request message format:**
        ```
        Message: 0x400 - Power supply type request
        Module: 0x04 - Core module
        Instance: 0x00 - Any
        Data:
        ```

        **CAN response message format:**
        ```
        Message: 0x401 - Power supply type response
        Module: 0x00 - Core module
        Instance: 0x00
        Data: ADAPTER PoE
        Data Example: 0x01 0x00 (ADAPTER = true, PoE = false)
        ```

      responses:
        200:
          description: Successfully retrieved power supply type from core module
          content:
            application/json:
              schema:
                type: object
                properties:
                  adapter:
                    type: boolean
                    example: "true"
                  poe:
                    type: boolean
                    example: "false"

  /control/heater:
    post:
      tags:
        - Control module
      summary: Sets the target bottle heating temperature
      description: |-
        Set target temperature for bottle heater which should be reacher and maintained.

        **CAN request message format:**
        ```
        Message: 0x410 - Heater set temperature
        Module: 0x05 - Control module
        Instance: 0x00 - Any
        Data: TEMP0 TEMP1 TEMP2 TEMP3
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                temperature:
                  $ref: '#/components/schemas/temperature'
      responses:
        200:
          description: Successfully set heater target temperature
    get:
      tags:
        - Control module
      summary: Get the current target heating temperature
      description: |-
        Get current target temperature of bottle heater.

        **CAN request message format:**
        ```
        Message: 0x411 - Heater get temperature
        Module: 0x05 - Control module
        Instance: 0x00 - Any
        Data:
        ```

        **CAN response message format:**
        ```
        Message: 0x412 - Heater temperature response
        Module: 0x05 - Control module
        Instance: 0x00
        Data: TEMP0 TEMP1 TEMP2 TEMP3
        Data: - No target temperature set
        ```

      responses:
        200:
          description: Successfully retrieved heater target temperature
          content:
            application/json:
              schema:
                type: object
                properties:
                  temperature:
                    $ref: '#/components/schemas/temperature'

  /control/disable_heater:
    get:
      tags:
        - Control module
      summary: Disables the bottle heater
      description: |-
        Disables the bottle heater, this will stop the heating process.

        **CAN request message format:**
        ```
        Message: 0x413 - Heater disable
        Module: 0x05 - Control module
        Instance: 0x00 - Any
        Data:
        ```
      responses:
        200:
          description: Successfully disabled heater

  /sensor/temperature_top:
    get:
      tags:
        - Sensor module
      summary: Get the temperature of the top sensor on cultivation bottle
      description: |-
        Get the current temperature of the top sensor on cultivation bottle

        **CAN request message format:**
        ```
        Message: 0x422 - Top thermopile temperature request
        Module: 0x06 - Sensor module
        Instance: 0x00 - Any
        Data:
        ```

        **CAN response message format:**
        ```
        Message: 0x423 - Top thermopile temperature response
        Module: 0x06 - Sensor module
        Instance: 0x00
        Data: TEMP0 TEMP1 TEMP2 TEMP3
        ```

      responses:
        200:
          description: Successfully retrieved top sensor temperature
          content:
            application/json:
              schema:
                type: object
                properties:
                  temperature:
                    $ref: '#/components/schemas/temperature'

  /sensor/temperature_bottom:
    get:
      tags:
        - Sensor module
      summary: Get the temperature of the bottom sensor on cultivation bottle
      description: |-
        Get the current temperature of the bottom sensor on cultivation bottle

        **CAN request message format:**
        ```
        Message: 0x424 - Bottom thermopile temperature request
        Module: 0x06 - Sensor module
        Instance: 0x00 - Any
        Data:
        ```

        **CAN response message format:**
        ```
        Message: 0x425 - Bottom thermopile temperature response
        Module: 0x06 - Sensor module
        Instance: 0x00
        Data: TEMP0 TEMP1 TEMP2 TEMP3
        ```

      responses:
        200:
          description: Successfully retrieved bottom sensor temperature
          content:
            application/json:
              schema:
                type: object
                properties:
                  temperature:
                    $ref: '#/components/schemas/temperature'

components:
  schemas:
    module_name:
      type: string
      enum:
        - core
        - control
        - sensor
    uid:
      type: integer
      format: int64
      example: 0x0123456789abcdef
    temperature:
      type: number
      format: float
      example: 30.2

  parameters:
    module:
      name: module
      in: path
      required: true
      schema:
        $ref:
         '#/components/schemas/module_name'

  responses:
    module_not_found:
      description: Module not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Module not found